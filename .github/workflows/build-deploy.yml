name: Build and Deploy Code

on: ["push", "pull_request"]

jobs:   # Jobs work in parallel
  build:
    environment:
      name: Testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{secrets.DATABASE_USERNAME}}
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v3
      - name: Install Python version 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: Installing all dependencies
        run: pip install -r requirements.txt
      - name: Test with pytest
        run: |        # Running more than one command
          pip install pytest
          pytest


      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Optimizing the Workflow
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          # load: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
          # Cache all the images
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    needs:  [build]
    environment:
      name: Production

    # login(SSH) to our ubuntu server
    # cd app/src
    # git pull
    # systemctl  restart api
    steps:
      - name: Deloying to ubuntu server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{secrets.PROD_KEY}}
          port: ${{ secrets.PROD_PORT }}
          # password: ${{ secrets.PROD_PASSWORD }}
          script: |
            cd ~/app/src
            git pull
            echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api


      # This will rebuild all the time Which will cost us a lot of money and a lot of building time
      # - name: Set up Docker Buildx
        # id: buildx
        # uses: docker/setup-buildx-action@v2

      # - name: Build and push
        # id: docker_build
        # uses: docker/build-push-action@v2
        # with:
          # context: ./
          # file: ./Dockerfile
          # push: true
          # tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest

  # push:
    # branches:
      # - "main"
  # pull_request:
    # branches:
      # - "main"
